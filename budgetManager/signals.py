from django.db.models.signals import post_save, post_delete, pre_save
from django.dispatch import receiver
from django.utils import timezone
from .models import (
    Budget, CategorieDepense, Depense, Entree, Employe, 
    Notification, PaiementEmploye, MontantSalaire
)


def create_notification(user, message):
    """Fonction utilitaire pour cr√©er une notification"""
    Notification.objects.create(
        user=user,
        message=message,
        created_at=timezone.now()
    )


# Signaux pour Budget
@receiver(post_save, sender=Budget)
def budget_created_updated(sender, instance, created, **kwargs):
    """Signal d√©clench√© lors de la cr√©ation ou modification d'un budget"""
    if created:
        message = f"‚úÖ Nouveau budget '{instance.nom}' cr√©√© avec un montant de {instance.montant} ‚Ç¨"
        create_notification(instance.user, message)
    else:
        # V√©rifier si le budget est proche de l'√©puisement
        if instance.montant <= instance.montant_initial * 0.1:  # 10% restant
            message = f"‚ö†Ô∏è Attention! Votre budget '{instance.nom}' est presque √©puis√©. Reste: {instance.montant} ‚Ç¨"
            create_notification(instance.user, message)
        elif instance.montant <= instance.montant_initial * 0.2:  # 20% restant
            message = f"‚ö° Votre budget '{instance.nom}' est faible. Reste: {instance.montant} ‚Ç¨"
            create_notification(instance.user, message)


@receiver(post_delete, sender=Budget)
def budget_deleted(sender, instance, **kwargs):
    """Signal d√©clench√© lors de la suppression d'un budget"""
    message = f"üóëÔ∏è Budget '{instance.nom}' supprim√©"
    create_notification(instance.user, message)


# Signaux pour CategorieDepense
@receiver(post_save, sender=CategorieDepense)
def categorie_depense_created_updated(sender, instance, created, **kwargs):
    """Signal d√©clench√© lors de la cr√©ation ou modification d'une cat√©gorie de d√©pense"""
    if created:
        message = f"üìÇ Nouvelle cat√©gorie '{instance.nom}' cr√©√©e dans le budget '{instance.id_budget.nom}' avec {instance.montant} ‚Ç¨"
        create_notification(instance.user, message)
        
        # Notification pour le budget parent
        budget_message = f"üí∞ {instance.montant} ‚Ç¨ allou√©s √† la cat√©gorie '{instance.nom}' du budget '{instance.id_budget.nom}'"
        create_notification(instance.user, budget_message)


@receiver(post_delete, sender=CategorieDepense)
def categorie_depense_deleted(sender, instance, **kwargs):
    """Signal d√©clench√© lors de la suppression d'une cat√©gorie de d√©pense"""
    message = f"üóëÔ∏è Cat√©gorie '{instance.nom}' supprim√©e du budget '{instance.id_budget.nom}'"
    create_notification(instance.user, message)


# Signaux pour Depense
@receiver(post_save, sender=Depense)
def depense_created_updated(sender, instance, created, **kwargs):
    """Signal d√©clench√© lors de la cr√©ation ou modification d'une d√©pense"""
    if created:
        if instance.id_cat_depense:
            message = f"üí∏ Nouvelle d√©pense '{instance.nom}': {instance.montant} ‚Ç¨ dans la cat√©gorie '{instance.id_cat_depense.nom}'"
        else:
            message = f"üí∏ Nouvelle d√©pense '{instance.nom}': {instance.montant} ‚Ç¨ dans le budget '{instance.id_budget.nom}'"
        create_notification(instance.user, message)
        
        # V√©rifier si la cat√©gorie est proche de l'√©puisement
        if instance.id_cat_depense:
            cat = instance.id_cat_depense
            if cat.montant <= cat.montant_initial * 0.1:
                warning_message = f"‚ö†Ô∏è La cat√©gorie '{cat.nom}' est presque √©puis√©e! Reste: {cat.montant} ‚Ç¨"
                create_notification(instance.user, warning_message)


@receiver(post_delete, sender=Depense)
def depense_deleted(sender, instance, **kwargs):
    """Signal d√©clench√© lors de la suppression d'une d√©pense"""
    message = f"üóëÔ∏è D√©pense '{instance.nom}' supprim√©e"
    create_notification(instance.user, message)


# Signaux pour Entree
@receiver(post_save, sender=Entree)
def entree_created_updated(sender, instance, created, **kwargs):
    """Signal d√©clench√© lors de la cr√©ation ou modification d'une entr√©e"""
    if created:
        message = f"üí∞ Nouvelle entr√©e '{instance.nom}': +{instance.montant} ‚Ç¨ dans le budget '{instance.id_budget.nom}'"
        create_notification(instance.user, message)


@receiver(post_delete, sender=Entree)
def entree_deleted(sender, instance, **kwargs):
    """Signal d√©clench√© lors de la suppression d'une entr√©e"""
    message = f"üóëÔ∏è Entr√©e '{instance.nom}' supprim√©e"
    create_notification(instance.user, message)


# Signaux pour Employe (comptes entreprise seulement)
@receiver(post_save, sender=Employe)
def employe_created_updated(sender, instance, created, **kwargs):
    """Signal d√©clench√© lors de la cr√©ation ou modification d'un employ√©"""
    if created:
        message = f"üë§ Nouvel employ√© ajout√©: {instance.prenom} {instance.nom} - {instance.poste}"
        create_notification(instance.user, message)
    else:
        # V√©rifier changement de statut
        if instance.actif != 'ES':  # Pas en service
            status_labels = dict(instance.ACT)
            message = f"üìã Statut de {instance.prenom} {instance.nom} chang√©: {status_labels.get(instance.actif, instance.actif)}"
            create_notification(instance.user, message)


@receiver(post_delete, sender=Employe)
def employe_deleted(sender, instance, **kwargs):
    """Signal d√©clench√© lors de la suppression d'un employ√©"""
    message = f"üóëÔ∏è Employ√© {instance.prenom} {instance.nom} supprim√©"
    create_notification(instance.user, message)


# Signaux pour PaiementEmploye
@receiver(post_save, sender=PaiementEmploye)
def paiement_employe_created(sender, instance, created, **kwargs):
    """Signal d√©clench√© lors de la cr√©ation d'un paiement employ√©"""
    if created:
        message = f"üíµ Paiement de {instance.montant} ‚Ç¨ effectu√© √† {instance.id_employe.prenom} {instance.id_employe.nom}"
        create_notification(instance.user, message)
        
        # Notification pour le budget
        budget_message = f"üí∞ {instance.montant} ‚Ç¨ d√©duits du budget '{instance.id_budget.nom}' pour le salaire de {instance.id_employe.prenom} {instance.id_employe.nom}"
        create_notification(instance.user, budget_message)


@receiver(post_delete, sender=PaiementEmploye)
def paiement_employe_deleted(sender, instance, **kwargs):
    """Signal d√©clench√© lors de la suppression d'un paiement employ√©"""
    message = f"üóëÔ∏è Paiement de {instance.montant} ‚Ç¨ √† {instance.id_employe.prenom} {instance.id_employe.nom} annul√©"
    create_notification(instance.user, message)


# Signal pour v√©rifier les dates d'√©ch√©ance des budgets
@receiver(post_save, sender=Budget)  
def check_budget_expiry(sender, instance, created, **kwargs):
    """V√©rifier si un budget approche de sa date d'√©ch√©ance"""
    if not created and instance.date_fin:
        days_remaining = (instance.date_fin - timezone.now().date()).days
        
        if days_remaining <= 3 and days_remaining > 0:
            message = f"‚è∞ Votre budget '{instance.nom}' expire dans {days_remaining} jour(s)!"
            create_notification(instance.user, message)
        elif days_remaining <= 0:
            message = f"üö® Votre budget '{instance.nom}' a expir√©!"
            create_notification(instance.user, message)


# Signal personnalis√© pour les conseils automatiques
@receiver(post_save, sender=Budget)
def generate_budget_advice(sender, instance, created, **kwargs):
    """G√©n√©rer des conseils automatiques bas√©s sur l'utilisation du budget"""
    if not created:
        usage_percentage = ((instance.montant_initial - instance.montant) / instance.montant_initial) * 100 if instance.montant_initial > 0 else 0
        
        # Conseil si plus de 80% du budget est utilis√©
        if usage_percentage >= 80:
            from .models import Conseil
            conseil_message = f"Votre budget '{instance.nom}' est utilis√© √† {usage_percentage:.1f}%. Consid√©rez r√©viser vos d√©penses ou augmenter le budget."
            
            # √âviter les doublons de conseils
            existing_conseil = Conseil.objects.filter(
                user=instance.user,
                id_budget=instance,
                message__icontains="utilis√© √†"
            ).exists()
            
            if not existing_conseil:
                Conseil.objects.create(
                    user=instance.user,
                    id_budget=instance,
                    nom="Conseil automatique - Budget",
                    message=conseil_message
                )
                
                # Notification pour le nouveau conseil
                create_notification(instance.user, f"üí° Nouveau conseil disponible pour votre budget '{instance.nom}'")


# Signal pour configuration des salaires
@receiver(post_save, sender=MontantSalaire)
def salaire_config_updated(sender, instance, created, **kwargs):
    """Signal d√©clench√© lors de la configuration des salaires"""
    if created:
        message = "‚öôÔ∏è Configuration des montants de salaires cr√©√©e"
    else:
        message = "‚öôÔ∏è Configuration des montants de salaires mise √† jour"
    
    create_notification(instance.user, message)