# Generated by Django 5.2.3 on 2025-06-20 20:17

from django.db import migrations, models
import django.db.models.deletion
import uuid


def migrate_users_forward(apps, schema_editor):
    """Migration des utilisateurs existants vers le nouveau modèle"""
    CustomUser = apps.get_model('accounts', 'CustomUser')
    db_alias = schema_editor.connection.alias
    
    # Mettre à jour les utilisateurs existants
    for user in CustomUser.objects.using(db_alias).all():
        # Si l'utilisateur n'a pas d'email, en créer un basé sur le username
        if not user.email:
            user.email = f"{user.username}@example.com"
        
        # Générer un token de vérification d'email
        user.email_verification_token = uuid.uuid4()
        
        # Marquer l'email comme vérifié pour les utilisateurs existants
        user.is_email_verified = True
        
        user.save(using=db_alias)


def migrate_users_backward(apps, schema_editor):
    """Migration inverse (rollback)"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        # 1. Ajouter les nouveaux champs sans contraintes d'abord
        migrations.AddField(
            model_name='customuser',
            name='email_verification_token',
            field=models.UUIDField(default=uuid.uuid4, editable=False),
        ),
        migrations.AddField(
            model_name='customuser',
            name='failed_login_attempts',
            field=models.IntegerField(default=0, verbose_name='Tentatives de connexion échouées'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='is_email_verified',
            field=models.BooleanField(default=False, verbose_name='Email vérifié'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='last_activity',
            field=models.DateTimeField(auto_now=True, verbose_name='Dernière activité'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='last_login_ip',
            field=models.GenericIPAddressField(blank=True, null=True, verbose_name='Dernière IP de connexion'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='account_locked_until',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Compte verrouillé jusqu\'à'),
        ),
        
        # 2. Exécuter la migration des données
        migrations.RunPython(migrate_users_forward, migrate_users_backward),
        
        # 3. Modifier le champ email pour le rendre unique
        migrations.AlterField(
            model_name='customuser',
            name='email',
            field=models.EmailField(unique=True, verbose_name='Adresse email'),
        ),
        
        # 4. Supprimer le champ username
        migrations.RemoveField(
            model_name='customuser',
            name='username',
        ),
        
        # 5. Ajouter les nouveaux modèles
        migrations.CreateModel(
            name='UserDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('device_name', models.CharField(max_length=255, verbose_name='Nom de l\'appareil')),
                ('device_type', models.CharField(max_length=50, verbose_name='Type d\'appareil')),
                ('browser', models.CharField(blank=True, max_length=100, verbose_name='Navigateur')),
                ('os', models.CharField(blank=True, max_length=100, verbose_name='Système d\'exploitation')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('is_active', models.BooleanField(default=True, verbose_name='Appareil actif')),
                ('is_trusted', models.BooleanField(default=False, verbose_name='Appareil de confiance')),
                ('last_used', models.DateTimeField(auto_now=True, verbose_name='Dernière utilisation')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='accounts.customuser')),
            ],
            options={
                'verbose_name': 'Appareil utilisateur',
                'verbose_name_plural': 'Appareils utilisateur',
                'db_table': 'user_devices',
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('success', models.BooleanField(default=False, verbose_name='Connexion réussie')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Horodatage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_attempts', to='accounts.customuser')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='login_attempts', to='accounts.userdevice')),
            ],
            options={
                'verbose_name': 'Tentative de connexion',
                'verbose_name_plural': 'Tentatives de connexion',
                'db_table': 'login_attempts',
                'ordering': ['-timestamp'],
            },
        ),
        
        # 6. Mettre à jour les préférences utilisateur
        migrations.AddField(
            model_name='userpreferences',
            name='notifications_push',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='userpreferences',
            name='two_factor_auth',
            field=models.BooleanField(default=False, verbose_name='Authentification à deux facteurs'),
        ),
        
        # 7. Ajouter les contraintes uniques
        migrations.AlterUniqueTogether(
            name='userdevice',
            unique_together={('user', 'device_id')},
        ),
    ]
